/**
 * @file Firebase Security Rules for AudSync - Prototyping Mode
 *
 * @Core Philosophy:
 * This ruleset prioritizes secure authorization based on ownership and role-based access. Data schema validation is relaxed for rapid prototyping.
 *
 * @Data Structure:
 * - /users/{userId}: User profile information.
 * - /users/{userId}/rooms/{roomId}: Room details specific to a user.
 * - /rooms/{roomId}: Room information.
 * - /rooms/{roomId}/devices/{deviceId}: Device presence information.
 * - /rooms/{roomId}/playlists/{playlistId}: Playlist data for a room.
 * - /tracks/{trackId}: Audio track information.
 *
 * @Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Strict ownership is enforced for user-specific data.
 * - Public read access is NOT granted to any collection, as this is a collaborative audio sync app.
 *
 * @Denormalization for Authorization:
 * - The `hostId` is denormalized from the `Room` document into the `User` document to avoid extra reads in security rules.
 * - The `deviceId` is used in the device presence collection to enforce device-specific authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile with id = 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can get, update, and delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with id = 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure room details specific to a user. Only the user can access their own room details.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) User with UID 'user123' can create a room with roomId 'room456' under their profile.
     * @allow (get, update, delete) User with UID 'user123' can get, update, and delete a room with roomId 'room456' under their profile.
     * @deny (create) User with UID 'user456' cannot create a room with roomId 'room456' under user 'user123'.
     * @principle Restricts access to a user's own room details.
     */
    match /users/{userId}/rooms/{roomId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure device presence information within a room. Devices can only update their own presence.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create, update) Device with UID 'device123' can create or update its presence in room 'room456' if authenticated as 'device123'.
     * @deny (create, update) Device with UID 'device456' cannot create or update presence in room 'room456' as 'device123'.
     * @principle Enforces device-specific authorization for presence updates.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isDevice(deviceId) {
        return request.auth != null && request.auth.uid == deviceId;
      }

      function isExistingDevice(deviceId) {
        return isDevice(deviceId) && resource != null;
      }

      allow get: if isDevice(deviceId);
      allow list: if false;

      allow create: if isDevice(deviceId) && request.resource.data.uid == deviceId;
      allow update: if isExistingDevice(deviceId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingDevice(deviceId);
    }

    /**
     * @description Secure room information. Only the host can modify room details. All users can get the room data.
     * @path /rooms/{roomId}
     * @allow (get, list) Any authenticated user can get and list room information.
     * @allow (create, update, delete) User with UID 'user123' can create, update, and delete room 'room456' if they are the host.
     * @deny (create, update, delete) User with UID 'user456' cannot create, update, or delete room 'room456' if they are not the host.
     * @principle Enforces host-based authorization for room management.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isHost(hostId) {
        return request.auth != null && request.auth.uid == hostId;
      }

      function isExistingHost(hostId) {
        return isHost(hostId) && resource != null;
      }
      
      allow get, list: if isSignedIn();

      allow create: if isHost(request.resource.data.hostId);
      allow update: if isExistingHost(resource.data.hostId);
      allow delete: if isExistingHost(resource.data.hostId);
    }

    /**
     * @description Secure playlist data for a room. Only the host can modify the playlist.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (get, list) Any authenticated user can read a playlist.
     * @allow (create, update, delete) User with UID 'user123' can create, update, and delete a playlist if they are the host of the room.
     * @deny (create, update, delete) User with UID 'user456' cannot modify the playlist if they are not the host.
     * @principle Enforces host-based authorization for playlist management.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isHost(hostId) {
        return request.auth != null && request.auth.uid == hostId;
      }

      function isExistingHost(hostId) {
        return isHost(hostId) && resource != null;
      }

      allow get, list: if isSignedIn();

      allow create: if isHost(roomId);
      allow update: if isExistingHost(roomId);
      allow delete: if isExistingHost(roomId);
    }

    /**
     * @description Secure audio track information.
     * @path /tracks/{trackId}
     * @allow (get, list) Any authenticated user can read track information.
     * @deny (create, update, delete) No one can create, update, or delete tracks through the client. Tracks are managed server-side.
     * @principle Restricts client-side write access to track information.
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }
}