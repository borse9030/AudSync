/**
 * @file Firebase Security Rules for AudSync - Prototyping Mode
 * @description This ruleset enforces a strict user-ownership model for user data and room hosting, and allows public read access to audio tracks. It prioritizes authorization independence through denormalization and leverages structural segregation for clearer access control. This configuration is for rapid prototyping and does not enforce strict data validation.
 *
 * @dataStructure
 * - /users/{userId}: User profiles, owned by the user. Contains denormalized roomId and hostId for authorization.
 * - /users/{userId}/rooms/{roomId}: Room details specific to a user.
 * - /rooms/{roomId}: Room details, including host information and playback state.
 * - /rooms/{roomId}/devices/{deviceId}: Device presence information within a room.
 * - /rooms/{roomId}/playlists/{playlistId}: Playlists for a specific room.
 * - /tracks/{trackId}: Audio track information (publicly readable).
 *
 * @keySecurityDecisions
 * - Users can only manage their own profile data.
 * - Room creation and management is restricted to the room host.
 * - Tracks are publicly readable, but write access is not yet defined (TODO).
 * - Denormalization of hostId into User documents enables efficient authorization checks without extra reads.
 * - Listing users is disallowed.
 *
 * @denormalizationForAuthorization
 * - The `hostId` is denormalized from the `Room` document into the `User` document to avoid `get()` calls in security rules.
 *
 * @structuralSegregation
 * - User-owned data is stored under `/users/{userId}` to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their profile.
     * @allow (get) User with UID 'user_abc' can read their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a profile for user 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile of user 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions: only the owner can get their profile.
      allow get: if isOwner(userId);
      // Listing users is not allowed for privacy reasons.
      allow list: if false;

      // Write permissions: only the owner can create, update, or delete their profile.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage room details specific to them.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) User 'user_abc' can create a room under their ID if they are the owner (request.auth.uid == 'user_abc').
     * @allow (update) User 'user_abc' can update a room under their ID if they are the owner.
     * @allow (get) User 'user_abc' can read a room under their ID if they are the owner.
     * @deny (create) User 'user_xyz' cannot create a room under user 'user_abc''s ID.
     * @deny (update) User 'user_xyz' cannot update a room under user 'user_abc''s ID.
     * @deny (delete) User 'user_xyz' cannot delete a room under user 'user_abc''s ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/rooms/{roomId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions: only the owner can get their rooms.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write permissions: only the owner can create, update, or delete their rooms.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows devices to update their presence within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create) Device with ID 'device_123' can create its presence in room 'room_456' if request.auth.uid == 'device_123'.
     * @allow (update) Device with ID 'device_123' can update its presence in room 'room_456'.
     * @allow (get) Device with ID 'device_123' can read its presence in room 'room_456'.
     * @deny (create) Device with ID 'device_xyz' cannot create presence for device 'device_123'.
     * @deny (update) Device with ID 'device_xyz' cannot update the presence of device 'device_123'.
     * @deny (delete) Device with ID 'device_xyz' cannot delete the presence of device 'device_123'.
     * @principle Enforces device-specific ownership for writes.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      // Helper function to check if the user is signed in and the device ID matches.
      function isSignedIn() {
        return request.auth != null;
      }
      function isDevice(deviceId) {
        return isSignedIn() && request.auth.uid == deviceId;
      }
      function isExistingDevice(deviceId) {
        return isDevice(deviceId) && resource != null;
      }

      // Read permissions: only the device can read its own presence.
      allow get: if isDevice(deviceId);
      allow list: if false;

      // Write permissions: only the device can create, update, or delete its presence.
      allow create: if isDevice(deviceId);
      allow update: if isExistingDevice(deviceId);
      allow delete: if isExistingDevice(deviceId);
    }

    /**
     * @description Allows management of room details by the host.
     * @path /rooms/{roomId}
     * @allow (get) Any user can read room details.
     * @allow (create) User with UID 'user_abc' can create a room if they are the host (request.resource.data.hostId == request.auth.uid).
     * @allow (update) User with UID 'user_abc' can update a room if they are the host (resource.data.hostId == request.auth.uid).
     * @deny (create) User with UID 'user_xyz' cannot create a room for another host.
     * @deny (update) User with UID 'user_xyz' cannot update a room they don't host.
     * @deny (delete) User with UID 'user_xyz' cannot delete a room they don't host.
     * @principle Enforces host-based ownership for writes.
     */
    match /rooms/{roomId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      // Helper function to check if the user is the host of the room.
      function isHost(hostId) {
        return isSignedIn() && request.auth.uid == hostId;
      }
      function isExistingHost(hostId) {
        return isHost(hostId) && resource != null;
      }

      // Read permissions: anyone can read room details.
      allow get: if true;
      allow list: if true;

      // Write permissions: only the host can create, update, or delete the room.
      allow create: if isSignedIn() && request.resource.data.hostId == request.auth.uid;
      allow update: if isExistingHost(resource.data.hostId);
      allow delete: if isExistingHost(resource.data.hostId);
    }

    /**
     * @description Allows management of playlists within a room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (create) User can create a playlist if they are the host of the room.
     * @allow (update) User can update a playlist if they are the host of the room.
     * @allow (get) Any user can read the playlist details.
     * @deny (create) User 'user_xyz' cannot create a playlist in a room they don't host.
     * @deny (update) User 'user_xyz' cannot update a playlist in a room they don't host.
     * @deny (delete) User 'user_xyz' cannot delete a playlist in a room they don't host.
     * @principle Enforces host-based ownership for playlist management.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }
      // Helper function to check if the user is the host of the room (using a get() operation).
      function isHost(roomId) {
        return isSignedIn() && get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }
      function isExistingHost(roomId) {
        return isHost(roomId) && resource != null;
      }

      // Read permissions: anyone can read the playlist.
      allow get: if true;
      allow list: if true;

      // Write permissions: only the host can create, update, or delete the playlist.
      allow create: if isHost(roomId);
      allow update: if isExistingHost(roomId);
      allow delete: if isExistingHost(roomId);
    }

    /**
     * @description Allows public read access to track information. Write access is not yet defined.
     * @path /tracks/{trackId}
     * @allow (get) Any user can read track information.
     * @deny (create) No one can create tracks (TODO: implement write access control).
     * @deny (update) No one can update tracks (TODO: implement write access control).
     * @deny (delete) No one can delete tracks (TODO: implement write access control).
     * @principle Allows public read access to track information.
     */
    match /tracks/{trackId} {
      // Read permissions: anyone can read track information.
      allow get: if true;
      allow list: if true;

      // Write permissions: not yet defined.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}