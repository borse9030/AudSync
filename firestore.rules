/**
 * @fileoverview Firestore Security Rules for Auding - Prototyping Mode
 *
 * Core Philosophy: This ruleset enforces a user-ownership model and role-based access control for collaborative audio playback.
 * Data Structure: Data is organized hierarchically, with user-specific data under `/users/{userId}`, room-specific data under `/rooms/{roomId}`, and device presence information under `/rooms/{roomId}/devices/{deviceId}`.
 * Key Security Decisions:
 *   - Users can only manage their own profiles and devices.
 *   - Room hosts have control over room playback and settings.
 *   - Public listing of users or rooms is disallowed unless explicitly stated otherwise.
 *   - Denormalization is used to avoid costly `get()` operations in security rules.
 *
 * Authorization Independence is achieved by denormalizing `hostId` into the `User` document and ensuring presence data includes device-specific identifiers.
 * Structural Segregation is applied using hierarchical paths.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, list, update, delete) User with matching UID can get, list, update, and delete their own profile.
     * @deny (create, update, delete) Non-matching UID cannot create, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to room details specific to a user.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) User with matching UID can create their own room.
     * @allow (get, list, update, delete) User with matching UID can get, list, update, and delete their own room.
     * @deny (create, update, delete) Non-matching UID cannot create, update, or delete another user's room.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/rooms/{roomId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to device presence information within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create, update) Device with matching deviceId can update their own presence.
     * @allow (get) Any logged in user can get device presence.
     * @deny (create, update, delete) Non-matching deviceId cannot create, update, or delete another device's presence.
     * @principle Enforces device-level ownership for writes within a room.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isDevice(deviceId) {
        return request.auth != null && request.auth.uid == deviceId;
      }

      function isExistingDevice(deviceId) {
        return isDevice(deviceId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isDevice(deviceId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingDevice(deviceId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingDevice(deviceId);
    }

    /**
     * @description Controls access to room information.
     * @path /rooms/{roomId}
     * @allow (read) Any authenticated user can read room information.
     * @allow (create) User with matching UID can create a room, and must set hostId to their UID.
     * @allow (update, delete) Only the host (hostId) of the room can update or delete the room.
     * @deny (create, update, delete) Non-matching UID cannot create, update, or delete a room.
     * @principle Enforces host-level ownership for room management.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isHost() {
        return request.auth != null && resource.data.hostId == request.auth.uid;
      }

      function isCreatingHost() {
        return request.auth != null && request.resource.data.hostId == request.auth.uid;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isCreatingHost();
      allow update: if isSignedIn() && isHost();
      allow delete: if isSignedIn() && isHost();
    }

    /**
     * @description Controls access to playlist data for a given room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (read) Any authenticated user can read playlist data.
     * @allow (create, update, delete) Only the host of the room can create, update, or delete the playlist.
     * @deny (create, update, delete) Non-host users cannot modify the playlist.
     * @principle Enforces host-level ownership for playlist management.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isHost(roomId) {
        return get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isHost(roomId);
      allow update: if isSignedIn() && isHost(roomId);
      allow delete: if isSignedIn() && isHost(roomId);
    }

    /**
     * @description Controls access to audio track information.
     * @path /tracks/{trackId}
     * @allow (read) Any authenticated user can read track information.
     * @deny (create, update, delete) No one can create, update, or delete track information via client.
     * @principle Tracks data is read-only by client, it needs to be managed by admin.
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}