/**
 * @fileoverview Firestore Security Rules for AudSync.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-layered security model that balances open read access with strict, role-based write controls.
 * The primary goal is to allow secure real-time synchronized audio playback across multiple devices within rooms, with a focus on authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/rooms/{roomId}: Stores room details specific to a user.
 * - /rooms/{roomId}: Stores general room information.
 * - /rooms/{roomId}/devices/{deviceId}: Stores device presence information within a room.
 * - /rooms/{roomId}/playlists/{playlistId}: Stores playlist data for a given room.
 * - /tracks/{trackId}: Stores audio track information.
 *
 * Key Security Decisions:
 * - Signed-in users can read any room
 * - Write access to rooms is restricted to signed-in users.
 * - Users can only manage their own profile data.
 * - Users can only manage rooms they host.
 *
 * Denormalization for Authorization:
 * - The `hostId` is denormalized from the `Room` document into the `User` document to avoid costly `get()` operations in security rules.
 *
 * Structural Segregation:
 * - User-owned data is stored under `/users/{userId}`, while room-specific data is stored under `/rooms/{roomId}`, providing clear separation of concerns and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user with matching userId in the document.
     * @allow (get, list, update, delete) Signed-in user who owns the document.
     * @deny (create, update, delete) Any user trying to modify another user's profile.
     * @principle Enforces document ownership for writes and self-creation.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to manage their room details.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) Signed-in user with matching userId and roomId in the document.
     * @allow (get, list, update, delete) Signed-in user who owns the document.
     * @deny (create, update, delete) Any user trying to modify another user's room.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows devices to manage their presence within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create) Signed-in user with matching deviceId in the document.
     * @allow (get, list, update, delete) Signed-in user who owns the document.
     * @deny (create, update, delete) Any user trying to modify another device's presence.
     * @principle Enforces document ownership for writes.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(deviceId) {
        return isSignedIn() && request.auth.uid == deviceId;
      }

      function isExistingOwner(deviceId) {
        return isOwner(deviceId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isOwner(deviceId) && request.resource.data.deviceId == deviceId;
      allow update: if isExistingOwner(deviceId) && request.resource.data.deviceId == resource.data.deviceId;
      allow delete: if isExistingOwner(deviceId);
    }

    /**
     * @description Allows signed-in users to manage room information.
     * @path /rooms/{roomId}
     * @allow (read) Any signed-in user.
     * @allow (create, update, delete) Signed-in user.
     * @deny (create, update, delete) Non-signed-in users.
     * @principle Requires authentication for all writes.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows signed-in users to manage playlist data for a room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (read) Any signed-in user.
     * @allow (create, update, delete) Signed-in user.
     * @deny (create, update, delete) Non-signed-in users.
     * @principle Requires authentication for all writes.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read track information, but only authenticated users to manage it.
     * @path /tracks/{trackId}
     * @allow (read) Any user.
     * @allow (create, update, delete) Signed-in user.
     * @deny (create, update, delete) Non-signed-in users.
     * @principle Requires authentication for all writes.
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}