/**
 * @fileoverview Firestore Security Rules for AudSync.
 *
 * Core Philosophy: This ruleset enforces a strict ownership model for user data and a role-based model for room management, leveraging denormalization for authorization independence.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user.
 * - /users/{userId}/rooms/{roomId}: Stores room information specific to a user. The host can manage the room's playback state.
 * - /rooms/{roomId}/devices/{deviceId}: Stores device presence information within a room. Devices can update their own presence.
 * - /rooms/{roomId}: Stores room-level data, with host-based write access.
 * - /rooms/{roomId}/playlists/{playlistId}: Stores playlists for a specific room, with host-based write access.
 * - /tracks/{trackId}: Stores track metadata, publicly readable but writable only by authorized users (not implemented in this prototype).
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed.
 * - Data consistency is enforced between document IDs and path parameters.
 * - Read operations are generally more permissive than write operations in this prototype to allow for rapid UI iteration.
 *
 * Denormalization for Authorization:
 * - The `hostId` is denormalized from the `Room` document into the `User` document to allow user-specific rules to avoid `get()` calls on the `Room` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces document ownership for all operations on a user's profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages room details specific to a user, allowing the host to manage playback state.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (get) if the request is made by the user with matching userId.
     * @allow (create) if the request is made by the user with matching userId.
     * @allow (update, delete) if the request is made by the room host.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Restricts access to a user's own rooms and allows host-based management.
     */
    match /users/{userId}/rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls device presence within a room; devices can update their own presence.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (get, create, update, delete) if the request is made by the device with matching deviceId.
     * @deny (get, create, update, delete) if the request is made by a different device.
     * @principle Restricts access to device presence data to the device itself.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isDevice(deviceId) {
        return isSignedIn() && request.auth.uid == deviceId;
      }

       function isExistingDevice(deviceId) {
        return isDevice(deviceId) && exists(resource);
      }


      allow get: if isDevice(deviceId);
      allow list: if false;

      allow create: if isDevice(deviceId);
      allow update: if isExistingDevice(deviceId);
      allow delete: if isExistingDevice(deviceId);
    }

    /**
     * @description Manages room-level data, allowing host-based write access.
     * @path /rooms/{roomId}
     * @allow (get, list) any authenticated user can read room information.
     * @allow (create, update, delete) only the host can modify room details.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn(); // Assuming public room listing is acceptable for now

      // TODO: Implement host-based write access using a denormalized 'hostId' field
      allow create, update, delete: if false; // TODO: Add host validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores playlist data for a given room, allowing host-based write access.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (get, list) any authenticated user can read playlist information.
     * @allow (create, update, delete) only the host can modify playlist details.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn(); // Assuming public playlist listing is acceptable for now

      // TODO: Implement host-based write access using a denormalized 'hostId' field
      allow create, update, delete: if false;  // TODO: Add host validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores audio track information; publicly readable but writable only by authorized users.
     * @path /tracks/{trackId}
     * @allow (get, list) any authenticated user can read track information.
     * @allow (create, update, delete) only authorized users can modify track details (authorization not implemented).
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn(); // Assuming public track listing is acceptable for now

      allow create, update, delete: if false; // TODO: Add authorization for track creation/modification
    }
  }
}