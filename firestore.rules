/**
 * @fileoverview Firestore Security Rules for AudSync.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for personal data and
 * a role-based model for room access, leveraging denormalization to avoid costly `get()` operations.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles; owned only by the user.
 * - `/users/{userId}/rooms/{roomId}`: Subcollection of user-specific rooms, allowing for individual room management.
 * - `/rooms/{roomId}`: Stores room metadata, host controlled.
 * - `/rooms/{roomId}/devices/{deviceId}`: Tracks device presence in a room; self-writable by the device.
 * - `/rooms/{roomId}/playlists/{playlistId}`: Stores playlists specific to a room.
 * - `/tracks/{trackId}`: Stores audio track metadata; publicly readable, owner-writable.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Data needed for authorization (e.g., `hostId`) is denormalized to minimize reads.
 * - Ambiguous relationships default to owner-only access.
 *
 * Denormalization for Authorization:
 * - The `User` document contains the `roomId` and `hostId` from the Room entity to avoid `get()` calls to determine user's room and host status.
 *
 * Structural Segregation:
 * - User-specific room data is stored under `/users/{userId}/rooms/{roomId}` to separate it from the global `/rooms/{roomId}` data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching auth ID can create their own profile.
     * @allow (get, list, update, delete) User with matching auth ID can read/write their own profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (update, delete) User cannot modify or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user-specific room data.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) User can create a room under their profile.
     * @allow (get, list, update, delete) User can read/write rooms under their profile.
     * @deny (create) User cannot create a room under another user's profile.
     * @deny (update, delete) User cannot modify or delete another user's room.
     * @principle Restricts access to a user's own room data.
     */
    match /users/{userId}/rooms/{roomId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to device presence information within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create) Device with matching device ID can create its presence.
     * @allow (get, list, update, delete) Device can read/write its own presence.
     * @deny (create) Device cannot create presence with a mismatched ID.
     * @deny (update, delete) Device cannot modify or delete another device's presence.
     * @principle Enforces device ownership for presence data.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isDevice(deviceId) {
        return request.auth != null && request.auth.token.device_id == deviceId;
      }

      function isExistingDevice(deviceId) {
          return isDevice(deviceId) && resource != null;
      }

      allow get: if isDevice(deviceId);
      allow list: if true; // Any device can see which devices are in the room.
      allow create: if isDevice(deviceId);
      allow update: if isExistingDevice(deviceId);
      allow delete: if isExistingDevice(deviceId);
    }

    /**
     * @description Controls access to room metadata.
     * @path /rooms/{roomId}
     * @allow (get, list) Any user can read room metadata.
     * @allow (create) Host can create a room.
     * @allow (update, delete) Only the host can modify or delete the room.
     * @deny (create) Non-hosts cannot create rooms.
     * @deny (update, delete) Non-hosts cannot modify or delete rooms.
     * @principle Enforces host ownership for room management.
     */
    match /rooms/{roomId} {
      function isHost(roomId) {
        return request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }

      function isExistingHost(roomId) {
        return isHost(roomId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null; // Any signed in user can create a room
      allow update: if isExistingHost(roomId);
      allow delete: if isExistingHost(roomId);
    }

    /**
     * @description Controls access to playlists within a room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (get, list) Any user can view the playlist.
     * @allow (create, update, delete) Only the host can modify or delete the playlist.
     * @deny (create, update, delete) Non-hosts cannot modify or delete playlists.
     * @principle Enforces host ownership for playlist management.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isHost(roomId) {
        return request.auth != null && get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }

      function isExistingHost(roomId) {
        return isHost(roomId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isHost(roomId);
      allow update: if isExistingHost(roomId);
      allow delete: if isExistingHost(roomId);
    }

    /**
     * @description Controls access to audio track metadata.
     * @path /tracks/{trackId}
     * @allow (get, list) Any user can read track metadata.
     * @allow (create, update, delete) Owner can create/update/delete track metadata.
     * @deny (create, update, delete) Non-owners cannot modify track metadata.
     * @principle Enforces ownership for track metadata management.
     */
    match /tracks/{trackId} {
        // CRITICAL: Cannot implement owner-only writes. The 'Track' entity is missing an 'ownerId' or 'authorId' field.
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}