/**
 * @fileOverview Firestore Security Rules for Auding App
 *
 * Core Philosophy:
 * This ruleset enforces a multi-layered security model, balancing user-specific data access with shared room control. It prioritizes ownership for user profiles and device presence while implementing role-based access for managing room playback. The design emphasizes authorization independence and structural segregation for enhanced security and scalability.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves. Contains denormalized `roomId`.
 * - /users/{userId}/rooms/{roomId}: Room details specific to a user.
 * - /rooms/{roomId}/devices/{deviceId}: Device presence information within a room. Accessible for updates only by the device itself.
 * - /rooms/{roomId}: Room-level data, with write access primarily restricted to the host.
 * - /rooms/{roomId}/playlists/{playlistId}: Playlist data for a given room.
 * - /tracks/{trackId}: Audio track information, publicly readable.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the authenticated user.
 * - Device presence data can only be modified by the device itself.
 * - Room settings and management are primarily controlled by the room host.
 * - Listing users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `hostId` is denormalized from the `Room` document into the `User` document to avoid costly `get()` calls for user-specific actions.
 * - The `deviceId` is stored on the User document to allow the device to set its presence and be present in a room.
 *
 * Structural Segregation:
 * - User profiles and room data are segregated to maintain clear ownership and access control boundaries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user profile information. Only the authenticated user can read and write their own profile.
     * @path: /users/{userId}
     * @allow: (create) User ZmD7vNe0liaedr7Na2Yff9T8jR03 can create their profile if request.auth.uid == userId.
     * @allow: (get) User ZmD7vNe0liaedr7Na2Yff9T8jR03 can read their profile.
     * @allow: (update) User ZmD7vNe0liaedr7Na2Yff9T8jR03 can update their profile.
     * @allow: (delete) User ZmD7vNe0liaedr7Na2Yff9T8jR03 can delete their profile.
     * @deny: (create) User anotherUser cannot create a profile for ZmD7vNe0liaedr7Na2Yff9T8jR03.
     * @deny: (get) User anotherUser cannot read the profile of ZmD7vNe0liaedr7Na2Yff9T8jR03.
     * @deny: (update) User anotherUser cannot update the profile of ZmD7vNe0liaedr7Na2Yff9T8jR03.
     * @deny: (delete) User anotherUser cannot delete the profile of ZmD7vNe0liaedr7Na2Yff9T8jR03.
     * @principle: Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Controls access to room details specific to a user.
     * @path: /users/{userId}/rooms/{roomId}
     */
    match /users/{userId}/rooms/{roomId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description: Controls access to device presence information within a room. Only the device itself can update its presence.
     * @path: /rooms/{roomId}/devices/{deviceId}
     * @allow: (create) Device ZmD7vNe0liaedr7Na2Yff9T8jR03 can create their presence record in room 72TMAY.
     * @allow: (get) Device ZmD7vNe0liaedr7Na2Yff9T8jR03 can read their presence record in room 72TMAY.
     * @allow: (update) Device ZmD7vNe0liaedr7Na2Yff9T8jR03 can update their presence record in room 72TMAY.
     * @allow: (delete) Device ZmD7vNe0liaedr7Na2Yff9T8jR03 can delete their presence record in room 72TMAY.
     * @deny: (create) Device anotherDevice cannot create a presence record for ZmD7vNe0liaedr7Na2Yff9T8jR03 in room 72TMAY.
     * @deny: (get) Device anotherDevice cannot read the presence record of ZmD7vNe0liaedr7Na2Yff9T8jR03 in room 72TMAY.
     * @deny: (update) Device anotherDevice cannot update the presence record of ZmD7vNe0liaedr7Na2Yff9T8jR03 in room 72TMAY.
     * @deny: (delete) Device anotherDevice cannot delete the presence record of ZmD7vNe0liaedr7Na2Yff9T8jR03 in room 72TMAY.
     * @principle: Enforces device-ownership for presence updates.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isOwner(deviceId) {
        return request.auth.uid == deviceId;
      }
      function isExistingOwner(deviceId) {
        return isOwner(deviceId) && resource != null;
      }
      allow get: if isOwner(deviceId);
      allow list: if false;
      allow create: if isOwner(deviceId) && request.resource.data.uid == deviceId;
      allow update: if isExistingOwner(deviceId) && request.resource.data.uid == deviceId;
      allow delete: if isExistingOwner(deviceId);
    }

    /**
     * @description: Controls access to room-level data. Primarily restricted to the room host.
     * @path: /rooms/{roomId}
     */
    match /rooms/{roomId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null; // TODO: Add validation for hostId.
      allow update: if request.auth.uid != null && resource != null; // TODO: Add validation for hostId.
      allow delete: if request.auth.uid != null && resource != null; // TODO: Add validation for hostId.
    }

    /**
     * @description: Controls access to playlist data for a given room.
     * @path: /rooms/{roomId}/playlists/{playlistId}
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null; // TODO: Add validation for hostId or room admin.
      allow update: if request.auth.uid != null && resource != null; // TODO: Add validation for hostId or room admin.
      allow delete: if request.auth.uid != null && resource != null; // TODO: Add validation for hostId or room admin.
    }

    /**
     * @description: Controls access to audio track information. Tracks are publicly readable.
     * @path: /tracks/{trackId}
     */
    match /tracks/{trackId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: The 'Track' entity is missing an 'ownerId' or 'authorId' field.
      allow update: if false; // TODO: The 'Track' entity is missing an 'ownerId' or 'authorId' field.
      allow delete: if false; // TODO: The 'Track' entity is missing an 'ownerId' or 'authorId' field.
    }
  }
}