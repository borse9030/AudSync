/**
 * @fileoverview Firestore Security Rules for Auding - Prototyping Mode
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on ownership and roles, while relaxing data shape validation for rapid prototyping.  It enforces strict access control based on user and device identity, ensuring that only authorized users and devices can modify data.
 *
 * Data Structure:
 * The Firestore database is structured hierarchically with users, rooms, devices, playlists, and tracks. Key relationships include:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/rooms/{roomId}: Rooms specific to a user, also owned by the user.
 * - /rooms/{roomId}: Room data, with a host (owner).
 * - /rooms/{roomId}/devices/{deviceId}: Device presence in a room.
 * - /rooms/{roomId}/playlists/{playlistId}: Playlists for a room.
 * - /tracks/{trackId}: Audio track metadata.
 *
 * Key Security Decisions:
 * - Strict user-ownership for user profiles and user-specific room data.
 * - Room ownership is based on the `hostId` field.
 * - Device presence is controlled by device ID.
 * - Data shape validation is minimized in this prototyping phase, focusing on ownership checks.
 * - List operations are generally restricted to owners or denied if the collection contains private user data.
 *
 * Denormalization for Authorization:
 * - User documents can contain a `roomId` and `hostId`, denormalized from the `Room` document, to simplify authorization checks and avoid costly `get()` operations.
 *
 * Structural Segregation:
 * - User-owned data is segregated under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile. `request.auth.uid` must match `userId`.
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile. `request.auth.uid` must match `userId`.
     * @deny (create, update, delete) - Unauthorized user attempts to create, update or delete another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to rooms owned by the user.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create) - Authenticated user creates a room under their profile. `request.auth.uid` must match `userId`.
     * @allow (get, list, update, delete) - Authenticated user accesses their own room. `request.auth.uid` must match `userId`.
     * @deny (create, update, delete) - Unauthorized user attempts to create, update or delete another user's room.
     * @principle Enforces user-ownership for room data.
     */
    match /users/{userId}/rooms/{roomId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants access to device presence information within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create, update) - Authenticated user creates or updates their own device presence. `request.auth.uid` must match the device's user ID.
     * @allow (get, list) - Authenticated user can read device presence.
     * @deny (create, update, delete) - Unauthorized user attempts to create, update or delete another device's presence.
     * @principle Enforces device-specific presence management.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to general room information.
     * @path /rooms/{roomId}
     * @allow (read) - Any authenticated user can read room data.
     * @allow (create, update, delete) - Only the room host can modify room data.
     * @deny (create, update, delete) - Unauthorized user attempts to modify room data.
     * @principle Enforces host-ownership for room management.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to playlists within a room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (read) - Any authenticated user can read playlist data.
     * @allow (create, update, delete) - Only the room host can modify playlist data.
     * @deny (create, update, delete) - Unauthorized user attempts to modify playlist data.
     * @principle Enforces host-ownership for playlist management within a room.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Grants access to audio track metadata.
     * @path /tracks/{trackId}
     * @allow (read) - Any authenticated user can read track metadata.
     * @deny (create, update, delete) - No one can create, update, or delete track metadata through the client.  These operations should be handled by backend services.
     * @principle Restricts write access to track metadata.
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}