/**
 * @fileoverview Firestore Security Rules for AudSync.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user data and
 * room data, with additional restrictions based on roles (host) for controlling room playback.
 * Device-specific write access is also enforced.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, owned by the user.
 * - /users/{userId}/rooms/{roomId}: Room details specific to a user, host-managed.
 * - /rooms/{roomId}: General room information, host-managed.
 * - /rooms/{roomId}/devices/{deviceId}: Device presence within a room, device-owned.
 * - /rooms/{roomId}/playlists/{playlistId}: Playlists associated with a room, host-managed.
 * - /tracks/{trackId}: Audio track information, publicly readable, owner-writable.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profiles.
 * - Room creation and management are restricted to the host of the room.
 * - Devices can only update their own presence information within a room.
 * - Public read access to track metadata.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - `hostId` is denormalized from the `Room` document into the `User` document to avoid needing `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's UID matches the userId.
     * @allow (get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create) - If the authenticated user's UID does not match the userId.
     * @deny (get, list, update, delete) - If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to room details specific to a user.
     * @path /users/{userId}/rooms/{roomId}
     * @allow (create, get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) - If the authenticated user's UID does not match the userId.
     * @principle Restricts access to a user's own room details.
     */
    match /users/{userId}/rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to device presence information within a room.
     * @path /rooms/{roomId}/devices/{deviceId}
     * @allow (create, update) - If the authenticated user's UID matches the deviceId.
     * @allow (get, list) - If true (publicly readable).
     * @allow (delete) - If the authenticated user's UID matches the deviceId and the document exists.
     * @deny (create, update) - If the authenticated user's UID does not match the deviceId.
     * @deny (delete) - If the authenticated user's UID does not match the deviceId or the document doesn't exist.
     * @principle Allows devices to manage their own presence in a room.
     */
    match /rooms/{roomId}/devices/{deviceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(deviceId) {
        return request.auth.uid == deviceId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(deviceId);
      allow update: if isSignedIn() && isOwner(deviceId);
      allow delete: if isSignedIn() && isOwner(deviceId);
    }

    /**
     * @description Controls access to general room information.
     * @path /rooms/{roomId}
     * @allow (get, list) - If true (publicly readable).
     * @allow (create, update, delete) - If the authenticated user is the host of the room.
     * @deny (create, update, delete) - If the authenticated user is not the host of the room.
     * @principle Restricts room management to the host.
     */
    match /rooms/{roomId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isHost(roomId) {
        return get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.hostId;
      allow update: if isSignedIn() && isHost(roomId);
      allow delete: if isSignedIn() && isHost(roomId);
    }

    /**
     * @description Controls access to playlists associated with a room.
     * @path /rooms/{roomId}/playlists/{playlistId}
     * @allow (get, list) - If true (publicly readable).
     * @allow (create, update, delete) - If the authenticated user is the host of the room.
     * @deny (create, update, delete) - If the authenticated user is not the host of the room.
     * @principle Restricts playlist management to the room host.
     */
    match /rooms/{roomId}/playlists/{playlistId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isHost(roomId) {
        return get(/databases/$(database)/documents/rooms/$(roomId)).data.hostId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isHost(roomId);
      allow update: if isSignedIn() && isHost(roomId);
      allow delete: if isSignedIn() && isHost(roomId);
    }

    /**
     * @description Controls access to audio track information.
     * @path /tracks/{trackId}
     * @allow (get, list) - If true (publicly readable).
     * @allow (create, update, delete) - If the authenticated user is the owner of the track.
     * @deny (create, update, delete) - If the authenticated user is not the owner of the track.
     * @principle Allows public read access to track metadata, but restricts write access to the owner.
     */
    match /tracks/{trackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // CRITICAL: Cannot implement owner-only writes. The 'Track' entity is missing an 'ownerId' or 'authorId' field.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerId; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.ownerId;
      allow get: if true;
      allow list: if true;
    }
  }
}