{
  "entities": {
    "Room": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Room",
      "type": "object",
      "description": "Represents a room where multiple devices can join and play audio in sync.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Room entity."
        },
        "hostId": {
          "type": "string",
          "description": "Reference to User who is the host of the room. (Relationship: User 1:N Room)"
        },
        "playlistId": {
          "type": "string",
          "description": "Reference to Playlist containing tracks for the room. (Relationship: Playlist 1:1 Room)"
        },
        "playbackState": {
          "type": "string",
          "description": "Current playback state of the room (playing, paused).",
          "format": "string"
        },
        "currentTrackId": {
          "type": "string",
          "description": "Reference to Track currently playing in the room. (Relationship: Track 1:1 Room)"
        },
        "position": {
          "type": "number",
          "description": "Current playback position in seconds."
        },
        "timestamp": {
          "type": "number",
          "description": "Server timestamp (ms) when the playback state was last updated."
        },
        "events": {
          "type": "array",
          "description": "History of playback events (play, pause, seek) with server timestamps.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "hostId"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Auding application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "deviceId": {
          "type": "string",
          "description": "Unique identifier for the user's device."
        },
        "name": {
          "type": "string",
          "description": "User's display name or nickname."
        },
        "lastSeen": {
          "type": "number",
          "description": "Server timestamp of the user's last activity."
        },
        "roomId": {
          "type": "string",
          "description": "Reference to Room the user is currently in. (Relationship: Room 1:N User)"
        }
      },
      "required": [
        "id",
        "deviceId"
      ]
    },
    "Track": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Track",
      "type": "object",
      "description": "Represents an audio track in the Auding application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Track entity."
        },
        "storagePath": {
          "type": "string",
          "description": "Path to the audio file in Cloud Storage."
        },
        "title": {
          "type": "string",
          "description": "Title of the audio track."
        },
        "duration": {
          "type": "number",
          "description": "Duration of the audio track in seconds."
        },
        "description": {
          "type": "string",
          "description": "Description of the track generated by AI."
        }
      },
      "required": [
        "id",
        "storagePath",
        "title",
        "duration"
      ]
    },
    "Playlist": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Playlist",
      "type": "object",
      "description": "Represents a playlist of audio tracks.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Playlist entity."
        },
        "trackIds": {
          "type": "array",
          "description": "References to Tracks in the playlist. (Relationship: Playlist 1:N Track)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Includes denormalized 'roomId' and 'hostId' from the Room for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rooms/{roomId}",
        "definition": {
          "entityName": "room",
          "schema": {
            "$ref": "#/backend/entities/Room"
          },
          "description": "Stores room details specific to a user. The host can manage the room's playback state.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "roomId",
              "description": "The unique identifier for the room."
            }
          ]
        }
      },
      {
        "path": "/rooms/{roomId}/devices/{deviceId}",
        "definition": {
          "entityName": "user",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores device presence information within a room. Devices can update their own presence.",
          "params": [
            {
              "name": "roomId",
              "description": "The unique identifier for the room."
            },
            {
              "name": "deviceId",
              "description": "The unique identifier for the device."
            }
          ]
        }
      },
      {
        "path": "/rooms/{roomId}",
        "definition": {
          "entityName": "room",
          "schema": {
            "$ref": "#/backend/entities/Room"
          },
          "description": "Stores information for a given room.",
          "params": [
            {
              "name": "roomId",
              "description": "The unique identifier for the room."
            }
          ]
        }
      },
      {
        "path": "/rooms/{roomId}/playlists/{playlistId}",
        "definition": {
          "entityName": "playlist",
          "schema": {
            "$ref": "#/backend/entities/Playlist"
          },
          "description": "Stores playlist data for a given room.",
          "params": [
            {
              "name": "roomId",
              "description": "The unique identifier for the room."
            },
            {
              "name": "playlistId",
              "description": "The unique identifier for the playlist."
            }
          ]
        }
      },
      {
        "path": "/tracks/{trackId}",
        "definition": {
          "entityName": "track",
          "schema": {
            "$ref": "#/backend/entities/Track"
          },
          "description": "Stores audio track information.",
          "params": [
            {
              "name": "trackId",
              "description": "The unique identifier for the track."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support AudSync's real-time synchronized audio playback across multiple devices within rooms. The design prioritizes authorization independence, clear access modeling, and structural segregation. This ensures secure and scalable access control, especially concerning who can control room playback and access audio files.\n\nThe core principle of **Authorization Independence** is achieved by denormalizing the `hostId` from the `Room` document into the `User` document. This eliminates the need for security rules to perform `get()` operations on the `Room` document when validating user-specific actions, such as updating their presence or settings within the room. The room ID will be denormalized into the user object. Additionally, to control access to the audio files, the `roomId` will be added as metadata on the audio files in Cloud Storage. The `hostId` is used in the security rules for write access to the room's playback state. The `deviceId` is leveraged to control device-specific presence.\n\n**Structural Segregation** is applied by using hierarchical paths to manage user-owned data. The app follows a `/users/{userId}/rooms/{roomId}` pattern to store a user's rooms, while continuing the path structure for presence data, to `/rooms/{roomId}/devices/{deviceId}`. This separation simplifies security rules by ensuring all data within a collection have similar access control requirements. Different room states and needs are kept separate, allowing for different scaling and potentially security needs.\n\nTo support secure list operations (QAPs), the structure uses path-based ownership. Only the room host or authorized devices can write playback commands, and devices can only write to their own presence node. The `deviceId` helps ensure QAPs because it can identify and restrict write access to specified devices.\n\nThis structure supports invariants such as ownership (hostId), timestamps (lastSeen), and denormalized data, ensuring data integrity and consistency across the AudSync application."
  }
}